# Stage 1: Builder
FROM nvidia/cuda:12.9.0-devel-ubuntu24.04 AS builder

# Set environment variables for non-interactive apt-get installs
ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    git \
    build-essential \
    wget \
    autoconf \
    automake \
    libtool \
    pkg-config \
    libibverbs-dev \
    librdmacm-dev \
    libibumad-dev \
    libnl-3-dev \
    libnl-route-3-dev \
    libssl-dev \
    libpci-dev \
    libnuma-dev && \
    rm -rf /var/lib/apt/lists/*

# Set environment variables for CUDA libraries in the builder stage.
ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH:-}"
ENV LIBRARY_PATH="/usr/local/cuda/lib64:${LIBRARY_PATH:-}"

# --- Build linux-rdma/perftest ---
WORKDIR /usr/src
RUN git clone --depth 1 https://github.com/linux-rdma/perftest.git
WORKDIR /usr/src/perftest
RUN ./autogen.sh && \
    ./configure  CUDA_H_PATH=/usr/local/cuda/include/cuda.h --prefix=/usr/local --enable-cudart && \
    make -j$(nproc) && \
    make install

# --- Build openmpi ---
WORKDIR /usr/src
RUN wget -O- https://download.open-mpi.org/release/open-mpi/v5.0/openmpi-5.0.7.tar.gz | tar xzf -
WORKDIR /usr/src/openmpi-5.0.7
RUN ./configure --prefix=/opt/openmpi --with-cuda=/usr/local/cuda && \
    make -j$(nproc) && \
    make install

# --- Build nvidia/ncc-tests ---
WORKDIR /usr/src
RUN git clone --depth 1 https://github.com/NVIDIA/nccl-tests.git
WORKDIR /usr/src/nccl-tests
RUN make -j$(nproc) MPI=1 MPI_HOME=/opt/openmpi

# Stage 2: Runtime
FROM nvidia/cuda:12.9.0-runtime-ubuntu24.04 AS runtime

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    rdmacm-utils \
    iproute2 \
    inetutils-ping \
    ibverbs-utils \
    libibverbs1 \
    libmlx5-1 \
    libnl-3-200 \
    libnl-route-3-200 \
    libpci3 \
    libmnl0 \
    libelf1 \
    pciutils \
    openssh-server \
    libnuma1 && \
    rm -rf /var/lib/apt/lists/*

# mpi-operator mounts the .ssh folder from a Secret. For that to work, we need
# to disable UserKnownHostsFile to avoid write permissions.
# Disabling StrictModes avoids directory and files read permission checks.
RUN echo "    UserKnownHostsFile /dev/null" >> /etc/ssh/ssh_config && echo "    StrictHostKeyChecking no" >> /etc/ssh/ssh_config &&\
    sed -i 's/#\(StrictModes \).*/\1no/g' /etc/ssh/sshd_config
RUN mkdir /run/sshd

COPY --from=builder /usr/local/bin/ /usr/local/bin/
COPY --from=builder /opt/openmpi/ /opt/openmpi/
COPY --from=builder /usr/src/nccl-tests/build/*_perf /usr/local/bin/

# Set environment variables for CUDA libraries in the runtime stage.
ENV LD_LIBRARY_PATH="/opt/openmpi/lib/:/usr/local/nvidia/lib64:/usr/local/cuda/lib64:${LD_LIBRARY_PATH:-}"
ENV LIBRARY_PATH="/usr/local/cuda/lib64:${LIBRARY_PATH:-}"
# Add the installation directory to the PATH for easy execution.
ENV PATH="/usr/local/bin:/usr/local/nvidia/bin:/opt/openmpi/bin:${PATH}"

# Set the default command to run when the container starts.
CMD ["/bin/bash"]